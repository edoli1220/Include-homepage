// Generated by CoffeeScript 1.3.3
(function() {
  var MemStore, app, authentication, board, colors, express, fileName, fileStream, flashify, fs, http, io, isAuthenticated, nib, path, requiresLogin, routes, server, sessionOpt, socket, stylus, stylusOpt, util;

  express = require('express');

  http = require('http');

  path = require('path');

  fs = require('fs');

  util = require('util');

  stylus = require('stylus');

  nib = require('nib');

  io = require('socket.io');

  colors = require('colors');

  flashify = require('flashify');

  routes = require('./routes/index');

  board = require('./board');

  authentication = require('./authentication');

  socket = require('./socket');

  app = express();

  fileName = __dirname + '/logs/log.txt';

  fileStream = fs.createWriteStream(fileName);

  fileStream.addListener('error', function(err) {
    return util.debug(err);
  });

  MemStore = express.session.MemoryStore;

  sessionOpt = {
    secret: 'Nothing Cake',
    store: MemStore({
      reapInterval: 60000 * 10
    })
  };

  stylusOpt = {
    src: __dirname + '/public',
    compile: function(str, path) {
      var compile;
      compile = stylus(str);
      compile.set('filename', path);
      compile.use(nib());
      compile["import"]('nib');
      return compile;
    }
  };

  isAuthenticated = function(req, res, next) {
    if (req.session.user) {
      isAuthenticated = true;
    } else {
      isAuthenticated = false;
    }
    res.locals.isAuthenticated = isAuthenticated;
    return next();
  };

  app.locals = {
    title: "인클루드"
  };

  app.configure(function() {
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.cookieParser());
    app.use(express.session(sessionOpt));
    app.use(flashify);
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use(express.bodyParser());
    app.use(stylusOpt);
    app.use(isAuthenticated);
    app.use(app.router);
    return app.use(express["static"](path.join(__dirname, 'public')));
  });

  app.configure('development', function() {
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
    app.set('port', 3013);
    return console.log('server running in ' + 'development'.green + ' mode');
  });

  app.configure('production', function() {
    app.use(express.errorHandler());
    app.set('port', 3014);
    return console.log('server running in ' + 'production'.green + ' mode');
  });

  requiresLogin = function(req, res, rext) {
    if (req.session.user) {
      return next();
    } else {
      return res.redirect('/login');
    }
  };

  app.get('/login', authentication.getLogin);

  app.get('/signup', authentication.getSignup);

  app.get('/logout', authentication.logout);

  app.get('/usernickname', authentication.getUserNickName);

  app.post('/login', authentication.postLogin);

  app.post('/signup', authentication.postSignup);

  app.get('/', routes.index);

  app.get('/about', routes.about);

  app.get('/projects', routes.projects);

  app.get('/studies', routes.studies);

  app.get('/activities', routes.activities);

  app.get('/ingcam', requiresLogin, routes.ingcam);

  app.get('/board/file', board.getBoardFile);

  app.get('/board/check/:board', board.checkBoard);

  app.get('/board/:board', board.listBoard);

  app.get('/board/:board/new', board.newBoard);

  app.get('/board/:board/read/:id', board.readBoard);

  app.get('/board/:board/edit/:id', board.editBoard);

  app.get('/board/:board/delete/:id', board.deleteBoard);

  app.post('/board/:board', board.postBoard);

  app.post('/board/:board/:id', board.updateBoard);

  app.post('/board/:board/:id/comment', board.postComment);

  app.post('/board/:board/:id/comment/del', board.deleteComment);

  server = http.createServer(app);

  server.listen(app.get('port'), function() {
    return console.log("Express server listening on port %d in %s mode", app.get('port'), app.settings.env);
  });

  io = io.listen(server);

  socket.setSocketIO(io);

}).call(this);
