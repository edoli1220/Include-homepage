// Generated by CoffeeScript 1.3.3
(function() {
  var async, availableBoards, deleteGridStore, documentModel, fs, gridStore, isAuthenticated, isValidBoard, isValidDocument, isValidUser, model, readGridStore, util;

  fs = require('fs');

  util = require('util');

  async = require('async');

  model = require('./models');

  documentModel = model.DocumentModel;

  availableBoards = model.AvailableBoard;

  gridStore = model.saveGridStore;

  deleteGridStore = model.deleteGridStore;

  readGridStore = model.readGridStore;

  isAuthenticated = function(req, callback) {
    if (req.session && req.session.user) {
      callback(null);
    } else {
      return callback(new Error("Not authenticated"));
    }
  };

  isValidDocument = function(document, callback) {
    if (!document) {
      callback(new Error("Invalid document"), document);
      return;
    }
    return callback(null, document);
  };

  isValidUser = function(document, req, callback) {
    return isAuthenticated(req, function(err) {
      if (err) {
        callback(err, document);
        return;
      }
      if (document.writer !== req.session.user.nickname) {
        callback(new Error("Invalid user"), document);
        return;
      }
      return callback(null, document);
    });
  };

  isValidBoard = function(boardName, req, callback) {
    return availableBoards().findOne({
      boardName: boardName
    }, function(err, board) {
      if (!board) {
        callback("Invalid board");
        return;
      }
      if (board.auth) {
        isAuthenticated(req(function(err) {
          callback(err);
        }));
      }
      return callback(err);
    });
  };

  exports.checkBoard = function(req, res) {
    var boardName;
    boardName = req.params.board;
    return isValidBoard(boardName, req, function(err) {
      if (err) {
        return res.send(err);
      } else {
        return res.send(null);
      }
    });
  };

  exports.listBoard = function(req, res) {
    var boardName, index, pages, tasks;
    index = req.query.index || 1;
    boardName = req.params.board;
    pages = [];
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.count(callback);
      }, function(count, callback) {
        var lower, maxPage, num, upper;
        upper = count - index * 15 + 15;
        lower = count - index * 15 + 1;
        maxPage = parseInt(count / 15) + 1;
        pages = (function() {
          var _i, _results;
          _results = [];
          for (num = _i = maxPage; maxPage <= 1 ? _i <= 1 : _i >= 1; num = maxPage <= 1 ? ++_i : --_i) {
            _results.push(num);
          }
          return _results;
        })();
        return model.find(null, null, {
          skip: index * 15 - 15,
          limit: 15,
          sort: {
            id: -1
          }
        }, callback);
      }, function(documents, callback) {
        var context;
        context = {
          documents: documents,
          boardName: boardName,
          pages: pages
        };
        return res.render('board/listBoard', context);
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'not authenticated':
          return res.redirect('/?board=' + boardName + '&type=1');
      }
    });
  };

  exports.readBoard = function(req, res) {
    var boardName, id, tasks;
    id = req.params.id;
    boardName = req.params.board;
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        var context;
        context = {
          document: document,
          boardName: boardName,
          user: req.session.user
        };
        return res.render('board/readBoard', context);
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'not authenticated':
          return res.redirect('/?board=' + boardName + '&type=1');
        case 'invalid document':
          return res.redirect('/board/' + boardName);
      }
    });
  };

  exports.postBoard = function(req, res) {
    var boardName, content, tasks, title, user;
    boardName = req.params.board;
    title = req.body.title;
    content = req.body.content;
    user = req.session.user;
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.find(null, null, {
          limit: 1,
          sort: {
            id: -1
          }
        }, callback);
      }, function(documents, callback) {
        var data, dataFile, document, index, key, parallelTasks, task, _ref;
        document = documents[0];
        index = document ? document.id + 1 : 0;
        title = !title ? '제목없음' : void 0;
        data = {
          id: index,
          title: title,
          writer: user.nickname,
          content: content,
          date: Date.now(),
          comments: [],
          files: []
        };
        model = documentModel(boardName);
        document = new model(data);
        parallelTasks = [];
        dataFile = null;
        _ref = req.files;
        for (key in _ref) {
          dataFile = _ref[key];
          if (dataFile.size > 0) {
            task = function(callback) {
              var file, name;
              file = fs.readFile(dataFile.path);
              name = document._id + dataFile.name;
              gridStore(name, file);
              return document.files.push(name);
            };
          }
        }
        return async.parallel(parallelTasks, function(err, results) {
          return callback(err, document);
        });
      }, function(document, callback) {
        return document.save(function(err) {
          return res.end('/board/' + boardName);
        });
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'not authenticated':
          return res.redirect('/?board=' + boardName + '&type=1');
        case 'invalid document':
          return res.redirect('/board/' + boardName);
        case 'invalid user':
          return res.redirect('/board/' + boardName);
      }
    });
  };

  exports.updateBoard = function(req, res) {
    var boardName, content, id, tasks, title, user;
    boardName = req.params.board;
    id = req.params.id;
    title = req.body.title;
    content = req.body.content;
    user = req.session.user;
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        return isValidUser(document, req, callback);
      }, function(document, callback) {
        var dataFile, key, parallelTasks, task, updates, _ref;
        title = !title ? '제목없음' : void 0;
        updates = {
          title: title,
          content: content,
          date: Date.now()
        };
        updates.files = document.files;
        parallelTasks = [];
        dataFile = null;
        _ref = req.files;
        for (key in _ref) {
          dataFile = _ref[key];
          if (dataFile.size > 0) {
            task = function(callback) {
              var file, name;
              file = fs.readFile(dataFile.path);
              name = document._id + dataFile.name;
              gridStore(name, file);
              return updates.files.push(name);
            };
          }
        }
        return async.parallel(parallelTasks, function(err, results) {
          return callback(err, updates);
        });
      }, function(document, callback) {
        var condition;
        condition = {
          _id: id
        };
        model = documentModel(boardName);
        return model.update(condition, updates, function(err) {
          return res.end('/board/' + boardName);
        });
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'not authenticated':
          return res.redirect('/?board=' + boardName + '&type=1');
        case 'invalid document':
          return res.redirect('/board/' + boardName);
        case 'invalid user':
          return res.redirect('/board/' + boardName);
      }
    });
  };

  exports.deleteBoard = function(req, res) {
    var boardName, id, tasks;
    boardName = req.params.board;
    id = req.params.id;
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        return isValidUser(document, req, callback);
      }, function(document, callback) {
        var file, _i, _len, _ref;
        _ref = document.files;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          deleteGridStore(file);
        }
        document.remove();
        return res.redirect('/board/' + boardName);
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'not authenticated':
          return res.redirect('/?board=' + boardName + '&type=1');
        case 'invalid document':
          return res.redirect('/board/' + boardName);
        case 'invalid user':
          return res.redirect('/board/' + boardName);
      }
    });
  };

  exports.newBoard = function(req, res) {
    var boardName, tasks;
    boardName = req.params.board;
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        return isAuthenticated(req, callback);
      }, function(callback) {
        var context;
        model = documentModel();
        context = {
          document: model,
          boardName: boardName
        };
        return res.render('board/editBoard', context);
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'not authenticated':
          return res.redirect('/board/' + boardName);
        case 'invalid document':
          return res.redirect('/board/' + boardName);
        case 'invalid user':
          return res.redirect('/board/' + boardName);
      }
    });
  };

  exports.editBoard = function(req, res) {
    var boardName, id, tasks;
    id = req.params.id;
    boardName = req.params.board;
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        return isValidUser(document, req, callback);
      }, function(document, callback) {
        var context;
        context = {
          document: document,
          boardName: boardName
        };
        return res.render('board/editBoard', context);
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid board':
          return res.redirect('/?board=' + boardName + '&type=0');
        case 'no authenticated':
          return res.redirect('/board/' + boardName);
        case 'invalid document':
          return res.redirect('/board/' + boardName);
        case 'invalid user':
          return res.redirect('/board/' + boardName);
      }
    });
  };

  exports.postComment = function(req, res) {
    var boardName, comment, id, tasks;
    id = req.params.id;
    boardName = req.params.board;
    comment = {};
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        return isAuthenticated(req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        var comments, condition, updates;
        comment = {
          writer: req.session.user.nickname,
          content: req.body.content,
          date: Date.now()
        };
        comments = document.comments;
        comments.push(comment);
        updates = {
          comments: comments
        };
        condition = {
          _id: id
        };
        model = documentModel(boardName);
        return model.update(condition, updates, callback);
      }, function(callback) {
        return res.json(comment);
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      if (err) {
        return res.end(err);
      }
    });
  };

  exports.deleteComment = function(req, res) {
    var boardName, id, idComment, tasks;
    id = req.params.id;
    boardName = req.params.board;
    idComment = req.body.idComment;
    tasks = [
      function(callback) {
        return isAuthenticated(req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        var comment, comments, condition, updates, _i, _len, _ref;
        comments = [];
        _ref = document.comments;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comment = _ref[_i];
          if (!(comment._id.toString() === idComment && comment.writer === req.session.user.nickname)) {
            comments.push(comment);
          }
        }
        updates = {
          comments: comments
        };
        condition = {
          _id: id
        };
        model = documentModel(boardName);
        return model.update(condition, updates, callback);
      }, function(callback) {
        return res.end('success');
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      return res.end(err);
    });
  };

  exports.getBoardFile = function(req, res) {
    var boardName, fileName, id, idDocument, tasks;
    id = req.query.id;
    boardName = req.query.boardName;
    fileName = req.query.name;
    idDocument = '';
    tasks = [
      function(callback) {
        return isValidBoard(boardName, req, callback);
      }, function(callback) {
        model = documentModel(boardName);
        return model.findById(id, callback);
      }, function(document, callback) {
        return isValidDocument(document, callback);
      }, function(document, callback) {
        idDocument = document._id;
        return readGridStore(fileName, callback);
      }, function(result, buffer, callback) {
        res.attachment(fileName.replace(idDocument, ''));
        res.write(buffer, 'binary');
        return res.end();
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      switch (err) {
        case 'invalid document':
          res.redirect('/board/' + boardName);
      }
      return res.end();
    });
  };

}).call(this);
